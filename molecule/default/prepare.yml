---
- name: Prepare Mock Server
  hosts: mock_server
  become: true
  tasks:
    - name: Start mock server
      raw: "nohup java -Dfile.encoding=UTF-8 -cp /mockserver-netty-jar-with-dependencies.jar:/libs/* -Dmockserver.propertyFile=/mockserver.properties org.mockserver.cli.Main -serverPort 1080 </dev/null >/dev/null 2>&1 & sleep 1"
      changed_when: false

- name: Set Expectations
  hosts: mock_server
  connection: local
  gather_facts: false
  tasks:
    - name: Reset mock server expectations
      uri:
        url: "https://{{ inventory_hostname }}:1080/mockserver/reset"
        method: PUT
        status_code: 200
        headers:
          Content-Type: application/json
        validate_certs: false

    - name: Create certificate api PUT expectation
      uri:
        url: "https://{{ inventory_hostname }}:1080/mockserver/expectation"
        method: PUT
        body:
          httpRequest:
            method: "PUT"
            path: "/api/v1/services/environments/production/certs/www.example.com"
          httpResponse:
            statusCode: 202
            body:
              currentStatus:
                state:
                  selfConfigState:
                    configured: 0
                    configuring: 1
                    deleting: 0
                    error: 0
                    isConfigured: false
                    isConfiguring: true
                    isDeleting: false
                    isError: false
        status_code: 201
        body_format: json
        headers:
          Content-Type: application/json
        validate_certs: false

    - name: Create certificate api GET expectation
      uri:
        url: "https://{{ inventory_hostname }}:1080/mockserver/expectation"
        method: PUT
        body:
          httpRequest:
            method: "GET"
            path: "/api/v1/services/environments/production/certs/www.example.com"
          httpResponse:
            statusCode: 200
            body:
              currentStatus:
                caCerts:
                certMetadata:
                privateKey: "*****"
                publicCert:
                state:
                  selfConfigState:
                    configured: 1
                    configuring: 0
                    deleting: 0
                    error: 0
                    isConfigured: true
                    isConfiguring: false
                    isDeleting: false
                    isError: false
                    total: 1
                type: PEM
              desiredState:
                caCerts:
                privateKey: "*****"
                publicCert:
                type: PEM
              metadata:
                createTime: '2021-09-14T22:16:51Z'
                displayName: www.example.com
                kind: certs
                links:
                  rel: "/api/v1/services/environments/production/certs/www.example.com"
                name: www.example.com
                uid: 2f54cebd-20bb-495c-bf8d-993a53920171
                updateTime: '2021-09-14T22:23:37Z'
        status_code: 201
        body_format: json
        headers:
          Content-Type: application/json
        validate_certs: false
